stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

deploy-prod-server:
  stage: deploy
  image: alpine:latest

  variables:
    DOCKER_COMPOSE_FILE: "/data/docker/$CI_PROJECT_NAME.yml"

  before_script:
    - apk add --no-cache openssh-client bash curl
    - eval $(ssh-agent -s)
    - echo "$SSH_PROD_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

  script:
    - |
      if [ "$CI_COMMIT_REF_NAME" == "main" ]; then
        export DOCKER_COMPOSE_NAME="docker-compose.prod.yml"
      elif [ "$CI_COMMIT_REF_NAME" == "dev" ]; then
        export DOCKER_COMPOSE_NAME="docker-compose.stage.yml"
      else
        echo "Error: Unsupported branch $CI_COMMIT_REF_NAME"
        exit 1
      fi
    - export CURL_URL="https://gitlab.sarapuloff-team.com/api/v4/projects/$CI_PROJECT_ID/repository/files/$DOCKER_COMPOSE_NAME/raw?ref=$CI_COMMIT_REF_NAME"
    - export TAG="$([ "$CI_COMMIT_REF_NAME" == "main" ] && echo "latest-${CI_COMMIT_SHORT_SHA}" || echo "stage-${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}")"
    - |
      ssh -T $PROD_SERVER "
        echo '=== Prepare environment ==='
        echo \"DOCKER_COMPOSE_FILE: $DOCKER_COMPOSE_FILE\"
        echo \"CURL_URL: $CURL_URL\"
        echo \"TAG: $TAG\"
        mkdir -p "$(dirname "$DOCKER_COMPOSE_FILE")"
      
        echo '=== Download docker-compose file ==='
        echo "Trying to download: $CURL_URL"
        curl --fail --location --header \"PRIVATE-TOKEN: ${GIT_ACCESS_TOKEN:-$CI_JOB_TOKEN}\" -o \"$DOCKER_COMPOSE_FILE\" \"$CURL_URL\"
      
        echo '=== Replace image tags in compose file ==='
        for APP_NAME in frontend backend; do
          sed -i \"s|image: *sarapuloff-\$APP_NAME|image: $CI_REGISTRY_IMAGE/\$APP_NAME:$TAG|g\" \"$DOCKER_COMPOSE_FILE\"
        done
      
        echo '=== Docker login... ==='
        echo \"$CI_REGISTRY_PASSWORD\" | docker login -u \"$CI_REGISTRY_USER\" --password-stdin \"$CI_REGISTRY\" && echo 'Docker login succeeded' || { echo 'Docker login failed'; exit 1; }
      
        echo '=== Stop and remove existing containers ==='
        docker compose -f \"$DOCKER_COMPOSE_FILE\" down || true
      
        echo "=== Pull new images ==="
        for APP_NAME in frontend backend; do
          docker pull \"$CI_REGISTRY_IMAGE/\$APP_NAME:$TAG\"
        done
      
        echo "=== Start new containers ==="
        docker compose -f \"$DOCKER_COMPOSE_FILE\" up -d
      "
  environment: production
  needs:
    - build-frontend
    - build-backend
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
      when: manual
  allow_failure: false
